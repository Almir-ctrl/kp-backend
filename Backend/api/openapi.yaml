openapi: 3.0.3
info:
  title: AiMusicSeparator Backend API
  version: 1.0.0
  description: Minimal OpenAPI spec for upload, songs, processing, status, download and proxy endpoints.
servers:
  - url: http://localhost:5000
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  version:
                    type: string
                    example: 1.2.3
  /upload:
    post:
      summary: Upload audio file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  description: JSON string with optional title/artist
            encoding:
              metadata:
                contentType: application/json
                style: form
                explode: false
      responses:
        '200':
          description: Upload accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
              examples:
                simple:
                  summary: Basic upload response
                  value:
                    file_id: abc123
                    url: /download/abc123
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
      x-examples:
        curl: |
          curl -v -F "file=@/path/to/song.mp3" http://localhost:5000/upload
  /songs:
    get:
      summary: List songs
      responses:
        '200':
          description: A list of songs
          content:
            application/json:
              schema:
                type: object
                properties:
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
  /songs/{file_id}:
    get:
      summary: Get song metadata
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Song metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
    patch:
      summary: Update song metadata
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                artist:
                  type: string
                lyrics:
                  type: string
                timedLyrics:
                  type: array
                  items:
                    $ref: '#/components/schemas/TimedLyric'
      responses:
        '200':
          description: Updated song
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
    delete:
      summary: Delete song and artifacts
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
  /process/{model}/{file_id}:
    post:
      summary: Start processing job
      security:
        - BearerAuth: []
      parameters:
        - name: model
          in: path
          required: true
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Model-specific options
            example:
              prompt: Make a lo-fi instrumental
              variation: medium
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: accepted
                  job_id:
                    type: string
                  file_id:
                    type: string
              examples:
                accepted:
                  summary: Accepted response
                  value:
                    status: accepted
                    job_id: job-uuid-1
                    file_id: abc123
  /status/{job_id}:
    get:
      summary: Get job status
      security:
        - BearerAuth: []
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: processing
                  progress:
                    type: number
                    format: float
                    example: 0.42
                  message:
                    type: string
                  outputs:
                    type: object
                    additionalProperties:
                      type: string
              examples:
                processing:
                  value:
                    status: processing
                    progress: 0.12
                    message: Running demucs (stage 1)
                completed:
                  value:
                    status: completed
                    outputs:
                      instrumental: /download/abc123/instrumental
                      transcription: /download/abc123/transcription
  /download/{file_id}:
    get:
      summary: Download original file or list artifacts
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File stream or JSON
          content:
            application/json:
              schema:
                type: object
                properties:
                  artifacts:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        url:
                          type: string
              examples:
                list:
                  value:
                    artifacts:
                      - name: instrumental
                        url: /download/abc123/instrumental
            application/octet-stream:
              schema:
                type: string
                format: binary
  /download/{file_id}/{artifact_key}:
    get:
      summary: Download specific artifact
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
        - name: artifact_key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Artifact stream or JSON
  /proxy-audio:
    post:
      summary: Proxy external audio URL
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
      responses:
        '200':
          description: Streamed audio
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
              examples:
                example-remote-mp3:
                  value: "<binary>"
      x-examples:
        curl: |
          curl -X POST -H "Content-Type: application/json" -d '{"url":"https://.../song.mp3"}' http://localhost:5000/proxy-audio --output sample.mp3

  /uploads:
    post:
      summary: Create a resumable upload session
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  type: string
      responses:
        '201':
          description: Upload session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_id:
                    type: string
              examples:
                created:
                  value:
                    upload_id: upload-uuid-1

  /uploads/{upload_id}/chunk:
    post:
      summary: Upload a chunk for a resumable session
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Chunk accepted

  /uploads/{upload_id}/complete:
    post:
      summary: Complete the upload and assemble chunks
      parameters:
        - name: upload_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Upload completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
components:
  responses:
    Created:
      description: Created
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    UploadResponse:
      type: object
      properties:
        file_id:
          type: string
        url:
          type: string
    TimedLyric:
      type: object
      properties:
        text:
          type: string
        startTime:
          type: number
        endTime:
          type: number
    Song:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        artist:
          type: string
        duration:
          type: number
        url:
          type: string
        lyrics:
          type: string
        timedLyrics:
          type: array
          items:
            $ref: '#/components/schemas/TimedLyric'
    Error:
      type: object
      properties:
        error:
          type: string
        detail:
          type: string
    UploadResponse:
      type: object
      properties:
        file_id:
          type: string
        url:
          type: string
    JobStatus:
      type: object
      properties:
        status:
          type: string
        progress:
          type: number
          format: float
        message:
          type: string
    SongList:
      type: object
      properties:
        songs:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    Artifact:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    ArtifactList:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
    UploadMetadata:
      type: object
      properties:
        filename:
          type: string
        title:
          type: string
        artist:
          type: string
    ProcessRequest:
      type: object
      properties:
        prompt:
          type: string
        variation:
          type: string
    JobResponse:
      type: object
      properties:
        status:
          type: string
        job_id:
          type: string
        file_id:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  examples:
    SongList:
      summary: Example song list
      value:
        songs:
          - id: abc123
            title: Example
            artist: Artist
            url: /download/abc123
    JobProcessing:
      summary: Job processing example
      value:
        status: processing
        progress: 0.42
        message: stage 2
    JobCompleted:
      summary: Job completed with artifacts
      value:
        status: completed
        outputs:
          instrumental: /download/abc123/instrumental
          transcription: /download/abc123/transcription
    UploadExample:
      summary: Upload metadata example
      value:
        filename: sample.wav
        title: My Song
        artist: An Artist
